@startuml

title __MAP's Class Diagram__\n

  namespace movement {
    namespace map {
      class movement.map.DijkstraPathFinder {
          {static} - INFINITY : Double
          {static} - PQ_INIT_SIZE : int
          - okMapNodes : int[]
          - prevNodes : Map<MapNode, MapNode>
          - unvisited : Queue<MapNode>
          - visited : Set<MapNode>
          + DijkstraPathFinder()
          + getShortestPath()
          - getDistance()
          - initWith()
          - relax()
          - setDistance()
      }
    }
  }
  

  namespace movement {
    namespace map {
      class movement.map.DijkstraPathFinder.DistanceComparator {
          + compare()
      }
    }
  }
  

  namespace movement {
    namespace map {
      class movement.map.DijkstraPathFinder.DistanceMap {
          - map : HashMap<MapNode, Double>
          + DistanceMap()
          + get()
          + put()
          + toString()
      }
    }
  }
  

  namespace movement {
    namespace map {
      class movement.map.MapNode {
          {static} + MAX_TYPE : int
          {static} + MIN_TYPE : int
          - neighbors : Vector<MapNode>
          - type : int
          + MapNode()
          + addNeighbor()
          + addType()
          + compareTo()
          + getLocation()
          + getNeighbors()
          + isType()
          + isType()
          + toString()
          - addToList()
          - typeToBitMask()
      }
    }
  }
  

  namespace movement {
    namespace map {
      class movement.map.MapRoute {
          {static} + CIRCULAR : int
          {static} + PINGPONG : int
          - comingBack : boolean
          - index : int
          - stops : List<MapNode>
          - type : int
          + MapRoute()
          + getNrofStops()
          + getStops()
          + nextStop()
          {static} + readRoutes()
          + replicate()
          + setNextIndex()
          + toString()
      }
    }
  }
  

  namespace movement {
    namespace map {
      class movement.map.PointsOfInterest {
          {static} + POI_FILE_S : String
          {static} + POI_NS : String
          {static} + POI_SELECT_S : String
          - okMapNodeTypes : int[]
          - poiLists : ArrayList<List<MapNode>>
          - poiProbs : List<Tuple<Double, Integer>>
          - rng : Random
          + PointsOfInterest()
          + selectDestination()
          - readPois()
          - readPoisOf()
      }
    }
  }
  

  namespace movement {
    namespace map {
      class movement.map.SimMap {
          - isMirrored : boolean
          - needsRehash : boolean
          - nodes : ArrayList<MapNode>
          - nodesMap : Map<Coord, MapNode>
          + SimMap()
          + getMaxBound()
          + getMinBound()
          + getNodeByCoord()
          + getNodes()
          + getOffset()
          + isMirrored()
          + mirror()
          + toString()
          + translate()
          - setBounds()
      }
    }
  }
  

  movement.map.DijkstraPathFinder o-- movement.map.DijkstraPathFinder.DistanceMap : distances
  movement.map.DijkstraPathFinder +-down- movement.map.DijkstraPathFinder.DistanceComparator
  movement.map.DijkstraPathFinder +-down- movement.map.DijkstraPathFinder.DistanceMap
  movement.map.DijkstraPathFinder.DistanceComparator .up.|> java.util.Comparator
  movement.map.MapNode .up.|> java.lang.Comparable
  movement.map.MapNode o-- core.Coord : location
  movement.map.PointsOfInterest o-- movement.map.SimMap : map
  movement.map.SimMap .up.|> java.io.Serializable
  movement.map.SimMap o-- core.Coord : maxBound
  movement.map.SimMap o-- core.Coord : minBound
  movement.map.SimMap o-- core.Coord : offset


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
